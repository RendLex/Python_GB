# 1. Создать класс TrafficLight (светофор).
# Техническое задание:
# Хорошо подумайте какие из атрибутов являются атрибутами экземпляра, а какие класса.
# определить атрибут color (цвет) - приватный. Это текущий цвет светофора.
# Определить метод state (состояние), возвращающий текущий цвет в виде строки.
# определить метод running (запуск)
# в рамках метода реализовать переключение светофора в режимы(цвета): красный, жёлтый, зелёный.
# продолжительность первого состояния (красный) составляет 7 секунд, второго (жёлтый) — 2 секунды, третьего (зелёный) — на ваше усмотрение.
# Подумайте о том как хранить продолжительности. В виде какой структуры и в качестве атрибута чего?
# переключение между режимами должно осуществляться как у реального светофора: красный, жёлтый, зелёный, жёлтый, красный и т.д.
# метод многократно меняет текущий цвет светофора в соответствии с продолжительностями в секундах и печатает текущий цвет с помощью state.
# Предусмотреть разумное ограничение на количество итераций.
# Проверить работу примера, создав экземпляр и вызвав метод running.
#
# Примечание:
# Для реализации задержек времени можно воспользоваться функцией sleep пакета time
# Циклическое переключение просто реализовать с помощью cycle пакета itertools
#
# Усложнение:
# Тайминги передаются при создании экземпляра светофора в виде трех чисел.
# Внутри конструктора их надо соединить в единую структуру с цветами, так, чтобы было максимально понятно и лаконично.
# Ограничение на количество итераций в методе running убрать. Прерывание работы светофора реализовать через нажатие Crtl-C (или stop в IDE) в процессе выполнения. Найти какое исключение при этом возникает. Обработать его и завершить программу с выводом диагностического сообщения.
from itertools import cycle
from time import sleep

class TrafficLight:
    __colors = ["красный", "желтый", "зеленый", "желтый"]

    def __init__(self, timing):
        # timing = [7, 2, 5]  # По условию задания
        self.__color = self.__colors[0]
        # Продублировали timing для желтого и создали итератор
        self.__iter_light = cycle(zip(self.__colors, timing + [timing[1]]))

    def state(self):
        return self.__color

    def running(self, cycles):
        for i in range(cycles):
            self.__color, duration = next(self.__iter_light)
            print(f"Зажегся {self.state()} - Время работы: {duration}s - ", end = "")
            sleep(duration)
            print(f"Потух {self.state()}")

    def running2(self):
        while True:
            try:
                self.__color, duration = next(self.__iter_light)
                print(f"Зажегся {self.state()} - Время: {duration}s - ", end = "")
                sleep(duration)
                print(f"Потух {self.state()}")
            except KeyboardInterrupt:
                print("\nРабота светофора грубо прервана")
                exit(0)

s = TrafficLight([0.3,0.4,0.6])
# s.running(8) # Число переключений светофора
s.running2() # Заверешение по прерыванию